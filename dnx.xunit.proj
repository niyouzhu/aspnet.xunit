<Project DefaultTargets="Test" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <UsingTask
      AssemblyFile="packages\xunit.buildtasks\tools\CodePlex.MSBuildTasks.dll"
      TaskName="CodePlex.MSBuildTasks.RegexReplace"/>
  <UsingTask
      AssemblyFile="packages\xunit.buildtasks\tools\CodePlex.MSBuildTasks.dll"
      TaskName="CodePlex.MSBuildTasks.Zip"/>

  <!-- Settings -->

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    <TrackFileAccess>false</TrackFileAccess>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)</SolutionDir>
    <NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(SolutionDir)\.nuget\nuget.exe</NuGetExePath>
  </PropertyGroup>
  <ItemGroup>
    <ProjectFiles Include="src\**\project.json" />
  </ItemGroup>

  <!-- Build server targets -->

  <Target Name="CI" DependsOnTargets="PackageRestore;SetVersionNumber;Test;ZipArtifacts" />

  <Target Name="PackageRestore" DependsOnTargets="_DownloadNuGet">
    <Message Text="Restoring NuGet packages..." Importance="High" />
    <Exec Command="&quot;$(NuGetExePath)&quot; install xunit.buildtasks -Source http://www.myget.org/F/b4ff5f68eccf4f6bbfed74f055f88d8f/ -SolutionDir &quot;$(SolutionDir)&quot; -Verbosity quiet -ExcludeVersion" Condition="!Exists('$(SolutionDir)\packages\xunit.buildtasks\')" />
  </Target>

  <Target Name="Build" DependsOnTargets="PackageRestore">
    <Exec Command="powershell -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned tools\dnx-build.ps1" />
  </Target>
  
  <Target Name="Test" DependsOnTargets="Build">
    <Exec Command="powershell -NoProfile -NonInteractive -ExecutionPolicy RemoteSigned tools\dnx-tests.ps1" />
  </Target>

  <Target Name="SetVersionNumber">
    <RegexReplace
        Pattern='99\.99\.99-dev'
        Replacement='$(BuildSemanticVersion)'
        Files='@(ProjectFiles)'
        Condition=" '$(BuildSemanticVersion)' != '' "/>
  </Target>

  <Target Name='ZipArtifacts'>
    <ItemGroup>
      <Binaries Include="src\**\*.nupkg" />
    </ItemGroup>

    <Delete Files="binaries.zip" />
    <Zip Files="@(Binaries)" ZipFileName="binaries.zip" StripPath="true" />
  </Target>

  <Target Name="_DownloadNuGet">
    <MakeDir Directories="$(SolutionDir)\.nuget" />
    <DownloadNuGet OutputFilename="$(NuGetExePath)" Condition="!Exists('$(NuGetExePath)')" />
  </Target>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          try {
              OutputFilename = Path.GetFullPath(OutputFilename);

              Log.LogMessage("Downloading latest version of NuGet.exe...");
              WebClient webClient = new WebClient();
              webClient.DownloadFile("https://www.nuget.org/nuget.exe", OutputFilename);

              return true;
          }
          catch (Exception ex) {
              Log.LogErrorFromException(ex);
              return false;
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>